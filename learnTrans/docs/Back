• PGSQL   : https://thoughtbot.com/blog/psql-basics

• Structure Rails db


    Présentation des relations et test console  : https://www.youtube.com/watch?v=MLZlNx8E88I

    - DB

       


        Console Rails :

            > reload!
            > .create and .create!

            > User .first .last
            > User.all
            > User.column_names
            > u = User.new u.name = "bob"  
            > user.save
            
            > u = user.first    u.new_record ?
            > u = User.last

        https://jacopretorius.net/2014/02/all-rails-db-rake-tasks-and-what-they-do.html

• Queries RoR / PG

        Service.where("name ILIKE ?", "%sport%") (Case insensitive))
        Service.where("name LIKE ?", "%sport%") 
        Service.pluck(:id) : Liste tous les ID de la table services dans un array
        find_or_create
        Where 
        Where.not
        REGEX : https://lzone.de/examples/Ruby%20Regex

--------------------------------------------------------------------------------------------------------

• Remember :

    - Route "collection" : Ajoute une URL donnée à un ressource

            resources :photos do
                collection do
                    get 'search'
                end
            end

    - Route "member" : This will recognize /photos/1/preview with GET
        
        resources :photos do
            member do
                get 'preview'
            end
        end
        
    
    - Route "on" To add an alternate new action using the :on shortcut:

            resources :comments do
                get 'preview', on: :new
            end

        This will enable Rails to recognize paths such as /comments/new/preview with GET,
        and route to the preview action of CommentsController
    
    - save(false) : Ignorer les validations à la création

        @user = User.new(....)
        @user.save(validate: false)
    
    - Exclamation ! : The method will throw an exception on failure rather than failing silently


    - Require with permit : Allows you to choose which attributes should be whitelisted, prevent accidental exposures


    - Forein Key : A foreign key is a set of attributes in a table that refers to the primary key of another table
        Rails maintains the foreign key relationships for you.
        You can enforce them in the database layer if you want by adding foreign key constraints.

    - DB : jsonb : https://nandovieira.com/using-postgresql-and-jsonb-with-ruby-on-rails

    - Références avec un nom différent de la table référencées => https://stackoverflow.com/questions/13694654/specifying-column-name-in-a-references-migration

    - rails db:reset : drop / load schema / seed

    - Migration : remove | add | change => https://www.ralfebert.de/snippets/ruby-rails/models-tables-migrations-cheat-sheet/?utm_source=lewagon.com

    - Ici, tous les students du teacher seront destroy

        class Teacher < ActiveRecord::Base
            has_many :students, dependent: :destroy
        end
    
    - inverse_of : explicite la relation inverse ActiveRecord
        If you do not set the :inverse_of record, the association will do its best to match itself
        up with the correct inverse. Automatic inverse detection only works on has_many, has_one, and belongs_to
        associations. In cases where you have "non-standard" naming you may however need to provide the option.
        En somme : à utiliser lorsqu'il y a des options, notamment si l'option class_name est présent !


    
    -    create_table :room_link_members do |t|
			t.belongs_to :room, index: true
			t.belongs_to :user, index: true
		end
    
    S'il y avait eu le index: :false tel que create_table :room_link_members, index: :false do |t|
    alors il n'y aurait pas eu d'ID sur chaque record de la table mais surtout,
    il naurait pas été possible de call destroy sur les record car les callback (si dependent: destroy) de destroy se base sur cet id,
    à l'inverse de delete_all qui ne call pas de callback

    - Datetime :

        x = DateTime.now
        x.hour
        x.day ...
    
